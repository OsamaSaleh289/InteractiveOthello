# Use this to outline your architecture, list the design patterns
# you used in your code and how you used them. Use a few as appropriate
# to make your code better, using them to complicate code will not help
# your marks. Start by looking at the design patterns we covered in class.

# USED 
1.Observer/Observable : Created by arnold, to be used by the View to observe the Model.

Observable: Observable.java
ConcreteObservableA : Othello.java	(Observed by Hints.java,TokenCounter.java, GameStatusTracker.java, TimeTracker.java, MoveStrategyTracker.java, BoardSquare.java)
ConcreteObservableB : Player.java
ConcreteObservableC : AITurnEventHandler.java
ConcreteObservableD : TimeTracker.java (Observed by TimerDisplay.java)
ConcreteObservableE : Hints.java (Observed by HintMenuItem.java, BoardSquare.java)
Observer : Observer.java
ConcreteObserverA: BoardSquare.java
ConcreteObserverB: GameStatusTracker.java
ConcreteObserverC: HintMenuItem.java
ConcreteObserverD: MoveStrategyTracker.java
ConcreteObserverE: TimerDisplay.java
ConcreteObserverF: TimeTracker.java
ConcreteObserverG: TokenCounter.java
ConcreteObserverH: Hints.java


2.Strategy: 

Context: Othello.java
IStrategy: MoveStrategy.java
ConcreteStrategyA: RandomMoveStrategy.java
ConcreteStrategyB: GreedyMoveStrategy.java
ConcreteStrategyC: BetterMoveStrategy.java

3.Command

- Command: GameStatusCommand.java
- ConcreteCommand: UndoCommand.java
- Client: UndoInvoker.java
- Invoker: UndoInvoker.java
- Receiver: Othello.java

4.Visitor
- Visitors: CopyVisitorInterface.java / HasMoveVisitorInterface.java / MoveVisitorInterface.java / TokenCountVisitorInterface.java / TokenGetterVisitorInterface.java
- ConcreteVisitors: CopyVisitor.java / HasMoveVisitor.java / MoveVisitor.java / TokenCountVisitor.java/ TokenGetterVisitor.java / FourxFour_TokenCountVisitor.java
- Visitable : OthelloBoard.java

- The purpose of this design pattern was to establish a more elegant link between Othello.java and OthelloBoard.java. The way we did this is through creating visitors
that Othello.java can use to access the operations we can perform on OthelloBoard. These visitors replaced a lot of the methods that had been present in OthelloBoard leading
to less cluttered and more readable code. Operations implemented by the visitors include Move, hasMove, getCount, getToken, and copy.


# UNUSED
Factory
Observer/Observable
Singleton
Decorator
State
Adapter
Iterator
Flyweight
Facade
Proxy
Composite
Prototype
Abstract Factory
Bridge
Template Method
Builder
Chain of Responsibility
...
There are more...
